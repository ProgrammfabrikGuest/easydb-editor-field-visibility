// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ez5.EditorFieldVisibility = (function(superClass) {
  extend(EditorFieldVisibility, superClass);

  function EditorFieldVisibility() {
    return EditorFieldVisibility.__super__.constructor.apply(this, arguments);
  }

  EditorFieldVisibility.prototype.isSimpleSplit = function() {
    return false;
  };

  EditorFieldVisibility.prototype.isEnabledForNested = function() {
    return true;
  };

  EditorFieldVisibility.prototype.__getFieldNamesFieldConcordanceFromFieldList = function(fieldList) {
    var attrname, entryKey, entryKeyPath, field, fieldsToReturn, i, len, nextLevelFieldsToReturn, ref, ref1, val;
    fieldsToReturn = {};
    for (i = 0, len = fieldList.length; i < len; i++) {
      field = fieldList[i];
      if (field.__cls === 'NestedRow') {
        field = field._field;
      }
      if ((field != null ? (ref = field.FieldSchema) != null ? ref.kind : void 0 : void 0) === 'field') {
        entryKey = field['FieldSchema']['_full_name'];
        entryKeyPath = entryKey.split(".");
        entryKeyPath.shift();
        entryKey = entryKeyPath.join('.');
        fieldsToReturn[entryKey] = field;
      }
      if ((field != null ? (ref1 = field.FieldSchema) != null ? ref1.kind : void 0 : void 0) === 'linked-table') {
        entryKey = field['FieldSchema']['_full_name'];
        entryKeyPath = entryKey.split(".");
        entryKeyPath.shift();
        entryKey = entryKeyPath.join('.');
        fieldsToReturn[entryKey] = field;
        nextLevelFieldsToReturn = this.__getFieldNamesFieldConcordanceFromFieldList(field.mask.fields);
        for (attrname in nextLevelFieldsToReturn) {
          val = nextLevelFieldsToReturn[attrname];
          fieldsToReturn[attrname] = nextLevelFieldsToReturn[attrname];
        }
      }
    }
    return fieldsToReturn;
  };

  EditorFieldVisibility.prototype.__findFieldInFieldList = function(fieldList, completeFieldName) {
    var field, fieldName, fieldNameParts, fieldNamePartsCount, newFieldList;
    fieldNameParts = completeFieldName.split('.');
    fieldNamePartsCount = fieldNameParts.length * 1;
    fieldName = fieldNameParts[0] + '';
    fieldNameParts.shift();
    completeFieldName = fieldNameParts.join('.');
    if (fieldList[fieldName + ':rendered'] && fieldNamePartsCount === 1) {
      field = fieldList[fieldName + ':rendered'];
      return field;
    } else if (fieldNamePartsCount > 1) {
      if (fieldList['_nested:' + fieldName]) {
        newFieldList = fieldList['_nested:' + fieldName][0];
        return this.__findFieldInFieldList(newFieldList, completeFieldName);
      } else {
        return this.__findFieldInFieldList(fieldList, completeFieldName);
      }
    } else if (fieldNamePartsCount === 1) {
      if (fieldList['_nested:' + fieldName]) {
        field = fieldList['_nested:' + fieldName + ':rendered'];
        return field;
      }
    }
  };

  EditorFieldVisibility.prototype.renderField = function(opts) {
    var actionFields, columnType, fields, fieldsRendererPlain, innerFields, jsonMap, observedField, observedFieldElement, observedFieldName, observedPath, that;
    that = this;
    observedFieldName = this.getDataOptions().observedfield;
    innerFields = this.renderInnerFields(opts);
    if (opts.mode === "detail") {
      return innerFields;
    }
    jsonMap = this.getDataOptions().jsonmap;
    if (CUI.util.isEmpty(jsonMap)) {
      return innerFields;
    } else {
      jsonMap = JSON.parse(jsonMap);
    }
    fieldsRendererPlain = this.__customFieldsRenderer.fields[0];
    if (!(fieldsRendererPlain instanceof FieldsRendererPlain)) {
      return innerFields;
    }
    fields = fieldsRendererPlain.fields || [];
    if (!fields) {
      return innerFields;
    }
    actionFields = [];
    actionFields = this.__getFieldNamesFieldConcordanceFromFieldList(fields);
    observedPath = observedFieldName.split(".");
    observedPath.shift();
    observedFieldName = observedPath.join('.');
    observedField = this.__findFieldInFieldList(opts.data, observedFieldName);
    columnType = observedField.opts.field.ColumnSchema.type;
    observedFieldElement = observedField.getElement();
    CUI.Events.listen({
      node: observedFieldElement,
      type: "data-changed",
      call: (function(_this) {
        return function(ev, info) {
          return _this.__manageVisibilitys(opts, columnType, jsonMap, observedField, observedFieldName, actionFields);
        };
      })(this)
    });
    this.__manageVisibilitys(opts, columnType, jsonMap, observedField, observedFieldName, actionFields);
    return innerFields;
  };

  EditorFieldVisibility.prototype.__manageVisibilitys = function(opts, columnType, jsonMap, observedField, observedFieldName, actionFields) {
    var actionFieldName, actionFieldValue, dataAsJson, dataAsString, observedFieldValue, ref, results, results1;
    observedFieldValue = '';
    if (columnType === 'custom:base.custom-data-type-dante.dante') {
      dataAsString = observedField._field.getDataAsString(observedField._data, observedField._top_level_data);
      dataAsJson = JSON.parse(dataAsString);
      observedFieldValue = dataAsJson.conceptURI;
      if (!CUI.util.isEmpty(observedFieldValue)) {
        observedFieldValue = observedFieldValue.replace('https', 'http');
      }
    }
    if (CUI.util.isEmpty(observedFieldValue)) {
      results = [];
      for (actionFieldName in actionFields) {
        actionFieldValue = actionFields[actionFieldName];
        if (actionFieldName !== observedFieldName) {
          if (observedFieldName.indexOf(actionFieldName) === -1) {
            actionFieldValue = this.__findFieldInFieldList(opts.data, actionFieldName);
            results.push(CUI.dom.hideElement(actionFieldValue.getElement()));
          } else {
            results.push(void 0);
          }
        } else {
          results.push(void 0);
        }
      }
      return results;
    } else {
      results1 = [];
      for (actionFieldName in actionFields) {
        actionFieldValue = actionFields[actionFieldName];
        if (actionFieldName !== observedFieldName) {
          actionFieldValue = this.__findFieldInFieldList(opts.data, actionFieldName);
          if (((ref = jsonMap[observedFieldValue]) != null ? ref.indexOf(actionFieldName) : void 0) !== -1 && jsonMap[observedFieldValue] !== void 0) {
            results1.push(CUI.dom.hideElement(actionFieldValue.getElement()));
          } else {
            results1.push(CUI.dom.showElement(actionFieldValue.getElement()));
          }
        } else {
          results1.push(void 0);
        }
      }
      return results1;
    }
  };

  EditorFieldVisibility.prototype.__getOptionsFromLinkedTable = function(linkedField) {
    var field, i, len, newOptions, ref;
    newOptions = [];
    ref = linkedField.mask.fields;
    for (i = 0, len = ref.length; i < len; i++) {
      field = ref[i];
      if (field.kind === 'field') {
        newOptions.push(this.__getOptionFromField(field));
      }
      if (field.kind === 'linked-table') {
        newOptions = newOptions.concat(this.__getOptionsFromLinkedTable(field));
      }
    }
    return newOptions;
  };

  EditorFieldVisibility.prototype.__getOptionFromField = function(field, complex) {
    var newOption;
    newOption = {
      value: field._full_name,
      text: field._column._name_localized + ' [' + field.column_name_hint + '] ("' + field._full_name + '")'
    };
    return newOption;
  };

  EditorFieldVisibility.prototype.getOptions = function() {
    var field, fieldOptions, fields, i, len, maskOptions, ref, test;
    fieldOptions = [];
    if ((ref = this.opts) != null ? ref.maskEditor : void 0) {
      fields = this.opts.maskEditor.opts.schema.fields;
      for (i = 0, len = fields.length; i < len; i++) {
        field = fields[i];
        if (field.kind === 'field') {
          fieldOptions.push(this.__getOptionFromField(field));
        }
        if (field.kind === 'linked-table') {
          test = this.__getOptionsFromLinkedTable(field);
          fieldOptions = fieldOptions.concat(test);
        }
      }
    }
    maskOptions = [
      {
        form: {
          label: $$('editor.field.visibility.nameofobservedfield')
        },
        type: CUI.Select,
        name: "observedfield",
        options: fieldOptions
      }, {
        form: {
          label: $$('editor.field.visibility.map')
        },
        type: CUI.Input,
        name: "jsonmap"
      }
    ];
    return maskOptions;
  };

  EditorFieldVisibility.prototype.trashable = function() {
    return true;
  };

  return EditorFieldVisibility;

})(CustomMaskSplitter);

CUI.ready((function(_this) {
  return function() {
    return MaskSplitter.plugins.registerPlugin(ez5.EditorFieldVisibility);
  };
})(this));
